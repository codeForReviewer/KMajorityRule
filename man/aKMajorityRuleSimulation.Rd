% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/aKMajorityCostMultiSimulation.R
\name{aKMajorityRuleSimulation}
\alias{aKMajorityRuleSimulation}
\title{aKMajorityRuleSimulation}
\usage{
aKMajorityRuleSimulation(folderName, externalCostOrExpectedUtility,
  numberOfIterations, groupSize, utilityDistribution,
  utilityDistributionParameters, errorDistribution, errorDistributionParameters,
  groupPostFailingProposalMeanUiIncrease, maximumNumberOfProposalsInASeries,
  perProposalDecisionCost, silentSeries, silentIterations, outputTo, writeCSV,
  writeRObjects, plotExternalCostTotalCosts, plotExpectedUtilityTotalCosts,
  plotOnlyExternalCost, plotOnlyExpectedUtility, plotNumberOfRounds, plotPareto,
  printOutputToScreen)
}
\arguments{
\item{folderName}{A user provided string for the output folder. The name
will be output_folderName_on_08_11_2013_at_17_30_25}

\item{numberOfIterations}{The number of iterations the model is run.}

\item{groupSize}{This is a vector that has a length of numberOfGroups. Each
element indicates the number of voters in each group.}

\item{utilityDistribution}{The distribution the utility ui values will be
drawn from. This can currently only be "normal".}

\item{utilityDistributionParameters}{The relevant parameters needed for the
distribution provided as utilityDistribution. You must provide a pair of
parameters for each group. For "normal" you must provide the mean and
standard deviation.  For example for 5 groups and
utilityDistribution="normal", you might provide
c(-.7,.2,-.1,.2,0,.2,-.3,.2,.2,.2).}

\item{errorDistribution}{The distribution the error ei values will be drawn
from. This can be "uniform", "normal".}

\item{errorDistributionParameters}{The relevant parameters needed for the
distribution provided as errorDistribution. For "normal" you must provide
the mean and standard deviation. For "uniform" you must provide the lower
bound and upper bound. For example for 5 groups and
errorDistribution="uniform", you might provide
c(-.7,0,-.1,.3,0,.2,-.3,.2,-.2,.2).}

\item{groupPostFailingProposalMeanUiIncrease}{The amount the mean used to
sample a group's ui goes up after a failing proposal. Must be entered as a
string vector.}

\item{maximumNumberOfProposalsInASeries}{An intiger or FALSE. If an integer,
it represents the maximum possible number of proposals considered by a
group of voters in one series of votes. Note though, that even if if
maximumNumberOfProposalsInASeries is set to an integer, that voting will
still stop if a proposal passes for all kMajority Rules being considerd. To
allow the series of proposals to anly stop once all kMajority Rules have
passes a proposal, set maximumNumberOfProposalsInASeries=FALSE.}

\item{perProposalDecisionCost}{The total decision costs a group faced given
the number of rounds (R) it took to pass the proposal. Must be entered as a
vector of strings.}

\item{silentSeries}{TRUE silences all of the notifications from the running
of a series of proposals like "The vote on the proposal in round 126 is
complete. kMajorities that passed proposal: 84". FALSE prints all the
notifications to the console as the series of proposals runs.}

\item{silentIterations}{TRUE silences the notification that an iteration is
complete, like "iteration 9 is complete.". FALSE prints all the
notifications to the console as the iterations run.}

\item{outputTo}{The working directory where you want the output from the
simulation to be stored. The default uses your current working directory.
Enter the directory as a string appropriate to your operating system, like
outputTo="/Users/username/Documents/Foldername/Targetfoldername" or
C:/Documents and Settings/username/My Documents/x/y/z"}

\item{writeCSV}{TRUE writes out all of the input and output as CSV files for
later use or inspection.}

\item{plotExternalCostTotalCosts}{If TRUE creates two graphs. One has the
decision cost, external cost and total cost for the worst groups. The other
plots the same three costs, but for the mean groups. This is the main
output presented in the paper.}

\item{plotExpectedUtilityTotalCosts}{If TRUE creates two graphs. One has the
decision cost, expected utility and total cost for the worst groups. The other
plots the same three measures, but for the mean groups. This is the main
output presented in the paper.}

\item{plotOnlyExternalCost}{If set to TRUE plots the external cost for the worst, mean
and best groups.}

\item{plotOnlyExpectedUtility}{If set to TRUE plots the expected utility for the worst, mean
and best groups.}

\item{plotNumberOfRounds}{If set to TRUE plots mean number of rounds it took for the
status quo to be defeated for each k-majority rule, across all the
iterations.}

\item{plotPareto}{If set to TRUE plots the proportion of rounds with a failed Pareto
Proposal.}

\item{printOutputToScreen}{If set to TRUE prints a summary of the simulation output to
the screen after the simulation is finished.}

\item{writeR}{TRUE writes out all the input and output as R objects using
dput() for later use or inspection. See ?dput.}
}
\value{
Stores all model input, output and graphs in provided working
  directory. The user can control which elemets to store and plot with the
  function parameters writeCSV, writeRObjects, plotEC, plotDC, plotTC,
  plotNumberOfRounds and plotPareto. Use the printOutputToScreen option to
  see summary output after the model runs.
}
\description{
Runs a series of proposals for J iterations, for all possible k-majority rules.
}
\examples{
aKMajorityRuleSimulation(folderName="SimulationA",
                                                 externalCostOrExpectedUtility="expectedUtility",
                                                 numberOfIterations=100,
                                                 groupSize=c(35,30,35),
                                                 utilityDistribution=c("normal","normal","normal"),
                                                 utilityDistributionParameters=c(-.25,.25,0,.25,.25,.25),
                                                 errorDistribution=c("normal","normal","normal"),
                                                 errorDistributionParameters=c(0,.3,0,.3,0,.3),
                                                 groupPostFailingProposalMeanUiIncrease=c(".1",".1",".1"),
                                                 maximumNumberOfProposalsInASeries=FALSE,
                                                 perProposalDecisionCost=.01,
                                                 outputTo=getwd(),
                                                 silentSeries=FALSE,
                                                 silentIterations=FALSE,
                                                 writeCSV=FALSE,
                                                 writeRObjects=FALSE,
                                                 plotExternalCostTotalCosts=FALSE
                                                 plotExpectedUtilityTotalCosts=FALSE,
                                                 plotOnlyExternalCost=FALSE,
                                                 plotOnlyExpectedUtility=FALSE,
                                                 plotNumberOfRounds=FALSE,
                                                 plotPareto=TRUE,
                                                 printOutputToScreen=TRUE)
}

