% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/iterations.R
\name{iterations}
\alias{iterations}
\title{iterations}
\usage{
iterations(numberOfIterations, groupSize, utilityDistribution,
  utilityDistributionParameters, errorDistribution, errorDistributionParameters,
  groupPostFailingProposalMeanUiIncrease, maximumNumberOfProposalsInASeries,
  perProposalDecisionCost, silentSeries, silentIterations)
}
\arguments{
\item{numberOfIterations}{The number of iterations the model is run.}

\item{groupSize}{This is a vector that has a length of numberOfGroups. Each
element indicates the number of voters in each group. While the examples in
the paper use 3 groups, the package can handle any number of groups.}

\item{utilityDistribution}{The distribution the utility ui values will be
drawn from. This can currently only be "normal".}

\item{utilityDistributionParameters}{The relevant parameters needed for the
distribution provided as utilityDistribution. You must provide a pair of
parameters for each group. For "normal" you must provide the mean and
standard deviation.  For example for 5 groups and
utilityDistribution="normal", you might provide
c(-.7,.2,-.1,.2,0,.2,-.3,.2,.2,.2).}

\item{errorDistribution}{The distribution the error ei values will be drawn
from. This can be "uniform", "normal".}

\item{errorDistributionParameters}{The relevant parameters needed for the
distribution provided as errorDistribution. For "normal" you must provide
the mean and standard deviation. For "uniform" you must provide the lower
bound and upper bound. For example for 5 groups and
errorDistribution="uniform", you might provide
c(-.7,0,-.1,.3,0,.2,-.3,.2,-.2,.2).}

\item{groupPostFailingProposalMeanUiIncrease}{The amount the mean used to
sample a group's ui goes up after a failing proposal. Must be entered as a
string vector.}

\item{maximumNumberOfProposalsInASeries}{An intiger or FALSE. If an integer,
it represents the maximum possible number of proposals considered by a
group of voters in one series of votes. Note though, that even if if
maximumNumberOfProposalsInASeries is set to an integer, that voting will
still stop if a proposal passes for all kMajority Rules being considerd. To
allow the series of proposals to anly stop once all kMajority Rules have
passes a proposal, set maximumNumberOfProposalsInASeries=FALSE.}

\item{perProposalDecisionCost}{The total decision costs a group faced given
the number of rounds (R) it took to pass the proposal. Must be entered as a
vector of strings.}

\item{silentSeries}{TRUE silences all of the notifications from the running
of a series of proposals like "The vote on the proposal in round 126 is
complete. kMajorities that passed proposal: 84". FALSE prints all the
notifications to the console as the series of proposals runs.}

\item{silentIterations}{TRUE silences the notification that an iteration is
complete, like "iteration 9 is complete.". FALSE prints all the
notifications to the console as the iterations run.}
}
\value{
A list of objects expectedUtility, expectedCosts, rounds, allGroups, allVoters, allYeas, allPassesForWhich, theInputParameters.
}
\description{
Runs numberOfIterations of seriesOfProposals() with the same set of initial parameters. Stores all of the input parameters, generated values and output for further analysis.
}

